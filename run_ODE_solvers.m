% Remember to write your ODE as a f.m file with definition function [z] = f(t,y).  I have% several ODE files, so I've named them f1, f2, f3, etc.  I've also written solution files% named y1, y2, y3, etc.ode = @f4; % -y/t + t^2t0 = 0;y0 = .5;h = .1;maxsteps = 20;EMs = EM(ode,t0,y0,h,maxsteps);IEMs = EM_I(ode,t0,y0,h,maxsteps);Sims = Simpsons(ode, t0, y0, h, maxsteps);RK4s = RK4(ode, t0, y0, h, maxsteps);% Create a time vector t and a vaector of true solution (ts) values for comparison with the different% ODE solvers.clear t; % This will allow the length of t to be reset according to a change in maxSteps.clear ts; % As above.t = t0:h:t0+maxsteps*h;for i = 1:length(t)  % ts(i) = t(i)^3/4 + 16/t(i); % for ODE y' = f3(t,y) = -y/t + t^2; y(4) = 20, this is the solution.  ts(i) = y4(t(i)); % Calls the solution to the ODE defined by f3.mendforprintf("    Time            Euler       Improved Euler    Simpsons           RK4        True Solution\n");printf("-------------   -------------   -------------   -------------   -------------   ------------- \n");for i = 1:maxsteps+1  printf("% 13.8f   % 13.8f   % 13.8f   % 13.8f   % 13.8f   % 13.8f\n", t0+(i-1)*h, EMs(i), IEMs(i), Sims(i), RK4s(i), ts(i));endfor% The following code creates a 2 x 2 grid of plots.  The grid arrangment is as follows:% % Plot #1 | Plot #2% --------+--------% Plot #3 | Plot #4figuresubplot(2,2,1) % Plot #1  hold on  plot(t,ts,"k-") % True solution  plot(t,EMs,"r--")  title("True vs. Euler");subplot(2,2,2) % Plot #2  hold on  plot(t,ts,"k-")  plot(t,IEMs,"b--")  title("True vs. Improved Euler");% The next two plots won't be very interesting until Simpson and RK4 are done.subplot(2,2,3) % Plot #3  hold on  plot(t,ts,"k-")  plot(t,Sims,"g-.")  title("True vs. Simpson's");subplot(2,2,4) % Plot #4  hold on  plot(t,ts,"k-")  plot(t,RK4s,"y-.")  title("True vs. RK4");% The print command below saves the plot as the PNG file named multi.png  print -dpng multi.png